---
title: "hands on programming with r"
author: 轩
date: now
date-format: "YYYY[年]M[月]D[日] HH:mm"
author-title: 作者
published-title: 写作日期
format: 
 html:
  theme:
      light: flatly
      dark: darkly
editor: visual

toc: true
toc-title: Contents
toc-depth: 4 
toc-expand: 2 
toc-location: left
---

## 1 the vary basics

```{r}
1+1
```

```{r}
100:130  #The colon operator (:) returns every integer between two integers. It is an easy way to create a sequence of numbers.
```

control +c取消进程

### 1.1 objects

```{r}
1:6
```

这些生成数字是短暂存在的，我们必须将其赋值到特定对象身上。R lets you save data by storing it inside an R object.

```{r}
a <-  1
a + 1
```

```{r}
die <- 1:6
die 
```

#### 1.1.1 一些命名原则

-   不能以数字为开头

-   不能使用特殊符号，&\*\@#%\^类似的符号不要使用

-   注意大小写

    ```{r}
    name <- 1
    Name <- 2
    Name + 1
    ```

-   不要使用已经用过的对象名，r会自动覆盖以前的对象

    ```{r}
    jerry <- 1
    jerry
    ```

    ```{r}
    jerry <- 2
    jerry
    ```

You can see which object names you have already used with the function `ls`:

```{r}
ls()
```

You can also see which names you have used by examining RStudio’s environment pane.

#### 1.1.2 对象的运算

r中对象的运算并不是向量乘法，而是向量中的每个对应元素做运算。When R performs element-wise execution, it matches up vectors and then manipulates each pair of elements independently.

```{r}
die - 1
```

```{r}
die / 2
```

```{r}
die * die
```

如果是向量长度不一样的两个对象做运算，r会自动重复补齐长度短的那个

```{r}
die + 1:2  #整倍数
```

```{r}
die + 1:4  #非整倍数会出现警告
```

向量的对应元素运算，保证了同一观测值的数与同一观测值的数相匹配。

```{r}
die %*% die  #内积
```

```{r}
die %o% die  #外乘
```

### 1.2 functions

R comes with many functions that you can use to do sophisticated tasks like random sampling. 

```{r}
round(3.1415926) #四舍五入
```

```{r}
factorial(3)  #阶乘
```

```{r}
mean(1:6)  #函数中的参数可以是原始数据
```

```{r}
mean(die)  #也可以是定义好的对象
```

```{r}
round(mean(die))  #甚至可以是运算的函数
```

```{r}
sample(x= 1:4 , size= 2)  #无放回抽样
```

```{r}
args(round)  #查看函数的语法
```

```{r}
sample(die, size = 2, replace = TRUE)  #有放回抽样，两个骰子可以投掷出相同的点数
```

Sampling with replacement is an easy way to create *independent random samples*. Each value in your sample will be a sample of size one that is independent of the other values. This is the correct way to simulate a pair of dice.

```{r}
dice <- sample(die, size = 2, replace = TRUE)
dice
```

```{r}
sum(dice)  #这时dice1的值已经固定，不论你后续对dice做任何操作，它都是5与5组成的一个向量
```

```{r}
dice <- sample(x= 1:6, size = 2, replace=TRUE)
sum(dice)   #此时的dice是随机生成的数组
```

### 1.3 write your own functions

Every function in R has three basic parts: a name, a body of code, and a set of arguments. 

```{r}
roll <- function() {
  die <- 1:6
  dice <- sample(die, size = 2, replace = TRUE)
  sum(dice)
}     #创建一个roll函数，这样就可以简洁执行掷色子并且求和的命令
```

```{r}
roll()  
```

函数后面的括号可以看作出发函数发生作用的触发器，加了括号才能完整运行定义后的函数。如果没有加括号，就只能显示函数的具体内容，如下：

```{r}
roll
```

```{r}
roll2 <- function(die) {
  dice <- sample(die, size = 2, replace = TRUE)
  sum(dice)
}    #现在我们去掉函数的第一行
```

```{r}
roll2(1:6)
```

```{r}
roll2(die = 1:6)
```

## 2 packages and help pages

### 2.1 包的使用

R语言之所以强大的一个重要原因，就是它包含丰富多彩的包，这些包方便我去进行数据分析

```{r}
# install.packages("ggplot2")
library("ggplot2")
x <- c(-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1)
y <- x^3
qplot(x, y)
```

```{r}
library("ggplot2")
x <- c(1, 2, 2, 2, 3, 3)
qplot(x, binwidth = 1)
```

```{r}
library("ggplot2")
x2 <- c(1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4)
qplot(x2, binwidth = 1)
```

```{r}
library(ggplot2)
rolls <- replicate(10000, roll())
qplot(rolls, binwidth = 1)
```

### 2.2 查看函数的帮助文档

```{r}
?sample  #查看函数的帮助文档
```

If a function comes in an R package, R won’t be able to find its help page unless the package is loaded.

如果你忘记了某个函数，你可以使用？？加上关键字词进行搜索。
